using System;
using System.Text.RegularExpressions;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using ORM;
using ORM.DBFields;
using ORM.exceptions;
using ORM.render;
using EM.DB;
using EM.Collections;
using System.Data.SqlClient;
using ORM.render.RenderControls;
using System.Collections.Generic;

namespace ORM.WebPage
{
    //TODO: use result.html instead of form.formHTML or form.listHTML
    public class ListResult
    {
        public string validationMessages;
        public string html;
        public string sucessMessages;
        public Table<TableRow> table;
    }
    public class FormResult
    {
        public string validationMessages;
        public string html;
        public string sucessMessages;
        public TableRow table;
    }

    /// <summary>
    /// Template for a web form generated by an ORM
    /// </summary>
    public class ORMFormPage: IDisposable
    {
        public ORMPageContext context;

        public delegate void setCustomData(TableRow table, SQLStatement atr, DBParams p);
        public delegate void saveTasks(object saveResult, TableRow table);
        public delegate string navigationLinksParameters(string searchText);

        public string validationMessages;
        public string formHTML;
        public string listHTML;
        public string listPaginationHTML;
        public string sucessMessages;
        public int listLimit = 25;
                
        public setCustomData selectSqlCustomData;
        public setCustomData updateSqlCustomData;
        public saveTasks afterSaveTasks;
        public navigationLinksParameters navLinksParam;

        protected bool useAjax;
        protected string _searchText;
        public Page page;

        public delegate IFormRenderer FormRendererGetter(TableRow table);
        public delegate IListRenderer ListRendererGetter<T>(TablePersist<T> table) where T : TableRowPersist;
        public FormRendererGetter formRenderer;
        public ListRendererGetter<TableRowPersist> listRenderer;
   
        public ORMFormPage(Page page)
        {
            this.page = page;
            context = new ORMPageContext();
            //ConnectionStringSettings cs = System.Configuration.ConfigurationManager.ConnectionStrings["VOIPConnectionString"];
            //SqlServerDBWorker dbe = new SqlServerDBWorker(cs.ConnectionString);
            //context.db = new SqlServer2005Database(dbe);
            context.page = this.page;
            this.formRenderer = this.simpleFormRenderer;
            this.listRenderer = this.simpleListRenderer;
        }

        public void Dispose()
        {
            context.db.db.Dispose();
        }
        
        public virtual string searchText
        {
            get
            {
                if (this._searchText == null)
                {
                    this._searchText = this.page.Request.Params["searchText"];
                }
                return this._searchText;
            }
            set { this._searchText = value; }
        }

        public virtual string getParam(string name)
        {
            if (page.Request.Params[name] == null) return "";
            return page.Request.Params[name];
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////  BUILD FORM HTML
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        protected virtual TableRowDynamicSQL getPKInstance(Type ormClass)
        {
            DBParams params_ = new DBParams();
            EList<string> whereLst = new EList<string>();

            TableRowDynamicSQL c = (TableRowDynamicSQL)TableRow.getInstance(ormClass, context);
            
            foreach (string f in c.pk)
            {
                string s = this.page.Request.Params[f];
                //if (s == null || s.Trim() == "") throw new BusinessLogicError(f + " was not supplied");
                object val = null;
                try
                {
                    val = c.fields[f].parseStringToValue(s);
                }
                catch (Exception e)
                {
                    throw new BusinessLogicError(f + " was in wrong format", e);
                }

                whereLst.Add(string.Format("{0} = @{1}", c.db.escape(f), ORMContext.fixName(f)));
                params_.Add(new DBParam("@" + ORMContext.fixName(f), val));
                
            }
            
            SQLStatement atr = new SQLStatement(c);
            atr.where = whereLst.join(" and ");
            //if (this.selectSqlCustomData != null) this.selectSqlCustomData(c, stm, params_);
            c.setFromDB(atr, params_);
            return c;

        }


        protected virtual TableRowDynamicSQL selectFormData(Type ormClass, string label)
        {
            if (this.searchText!= null && this.selectSqlCustomData != null)
            {
                TableRowDynamicSQL c = (TableRowDynamicSQL)TableRow.getInstance(ormClass, context);
                SQLStatement atr = new SQLStatement(c);
                DBParams p = new DBParams();
                this.selectSqlCustomData(c, atr, p);
                TablePersist<TableRowDynamicSQL> res = c.select<TableRowDynamicSQL>(atr, p);
                if (res.Count != 1)
                {
                    if (res.Count == 0) throw new BusinessLogicError("no " + label + " was found");
                    if (res.Count > 1) throw new BusinessLogicError("more then one " + label + " was found");
                }
                return res[0];
            }
            else
            {
                try
                {
                    return this.getPKInstance(ormClass);
                }
                catch (BusinessLogicError e)
                {
                    throw new BusinessLogicError("search text was not suplied and " + e.Message);
                }
            }
           
        }


        public TableRowDynamicSQL buildForm(string label, Type ormType) { return buildForm(label, ormType, this.page.Request.ServerVariables["URL"]); }
        public virtual TableRowDynamicSQL buildForm(string label, Type ormType, string url)
        {
            TableRowDynamicSQL c = (TableRowDynamicSQL)TableRow.getInstance(ormType, context);
            validationMessages = "<div class='validationErrors'>";

            IFormRenderer renderer = null;

            #region get_instance
            try
            {
                if (this.page.Request.Params["searchGo"] != null && this.page.Request.Params["searchGo"] != "")
                {
                    c = selectFormData(ormType, label);
                    renderer = this.formRenderer(c);
                }
                else
                {
                    renderer = this.formRenderer(c);
                    BusinessLogicError res = renderer.setTableFromWebForm();
                    if (res != null) throw res;
                }
            }
            catch (BusinessLogicError res)
            {
                validationMessages += "<div>" + label + " database error: " + res.Message + "</div>";
            }
            #endregion get_instance

            #region save_data
            if (this.page.Request.Params["Save"] == "Save")
            {
                try
                {
                    if (this.updateSqlCustomData != null) 
                    {
                        this.updateSqlCustomData(c, null, null); 
                    }
                    
                    object res = c.save();
                    if (this.afterSaveTasks != null) 
                    {
                        this.afterSaveTasks(res, c);
                    }

                    if (c.db.db.currentTransaction != null)
                    {
                        c.db.db.currentTransaction.Commit();
                    }
                    if (res is bool) { sucessMessages = "<div class='dbActionOK'>Succesfully updated " + label + " data</div>"; }
                    else 
                    { 
                        sucessMessages = "<div class='dbActionOK'>Succesfully inserted new " + label + "</div>";
                        if (((int)res) > 0)
                        {
                            SQLStatement atr = new SQLStatement(c);
                            atr.where = string.Format("{0}={1}", c.db.escape(c.pk[0]), res);
                            c.setFromDB(atr);
                        }
                        else
                        {
                            formHTML = "";
                            return c;
                        }
                    }
                }
                catch (ValidationException ve)
                {
                    validationMessages += "<div>There were validation errors, see below:";
                    foreach (ValidationException tve in c.validationExceptions)
                    {
                        if (tve.errorLocation == ValidationException.ERROR_LOCATION.TABLE)
                        {
                            validationMessages += "\n<br> - " + tve.Message;
                        }
                    }
                    validationMessages += "</div>";
                    if (c.db.db.currentTransaction != null)
                    {
                        try { c.db.db.currentTransaction.Rollback(); }
                        catch { }   
                    }
                }
                catch (SqlException se) 
                { 
                    validationMessages += "<div>" + label + " database error: " + se.Message + "</div>";
                    if (c.db.db.currentTransaction != null)
                    {
                        try { c.db.db.currentTransaction.Rollback(); }
                        catch { }   
                    }
                }
            }
            #endregion save_data

            #region delete_data
            else if (this.page.Request.Params["Delete"] == "Delete")
            {
                /*
                try
                {
                    bool res = c.delete();
                    validationMessages += "</div>";
                    if (res)
                    {
                        formHTML = "<div class='dbActionOK'>Succesfully deleted the " + label + "</div>";
                        return c;
                    }
                    else
                    {
                        validationMessages += "<div style='text-transform: uppercase;'>Could not delete " + label + "</div>";
                    }

                }
                catch (SqlException se) { validationMessages += "<div>" + label + " database error: " + se.Message + "</div>"; }
                */
                validationMessages += "<div style='text-transform: uppercase;'>Delete is not supported</div>";
            }
            #endregion delete_data

            validationMessages += "</div>";

            if (this.useAjax)
            {
                RenderAttributes ratr = new RenderAttributes();
                ratr.Add("name", url);
                ratr.Add("onSubmit", "callForm('" + url + "', '" + url + "');return false;");
                formHTML = (string)renderer.render(ratr);
            }
            else
            {
                formHTML = (string)renderer.render(RenderAttributes.fromStr("{'action':'" + url + "'}"));
            }
            
            return c;
        }
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////  BUILD LIST HTML
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public TablePersist<T> buildList<T>(Type ormType, object actionOrActions) where T : TableRowDynamicSQL { return buildList<T>(ormType, actionOrActions, null); }
        public TablePersist<T> buildList<T>(Type ormType, object actionOrActions, OrderedDictionary<string, string> fields) where T : TableRowDynamicSQL { return buildList<T>(ormType, actionOrActions, fields, this.page.Request.ServerVariables["URL"]); }
        public virtual TablePersist<T> buildList<T>(Type ormType, object actionOrActions, OrderedDictionary<string, string> fields, string listUrl) where T : TableRowDynamicSQL 
        {
            #region get_list_data
            TableRowDynamicSQL c = (TableRowDynamicSQL)TableRow.getInstance(ormType, context);

            EList<ListAction> actions = new EList<ListAction>();
            if (actionOrActions != null)
            {
                if (actionOrActions is string)
                {
                    actions.Add(new ListAction((string)actionOrActions, "Edit"));
                }
                else
                {
                    actions = (EList<ListAction>)actionOrActions;
                }
            }

            int total;
            int limit;
            int offset;
            getPageNavigParams(c, out total, out limit, out offset);
            TablePersist<T> res = getListData<T>(c, limit, offset);

            #endregion get_list_data

            
            //RENDER:
            listUrl = renderListHTML<T>(fields, listUrl, c, actions, total, limit, offset, res);

            return res;
        }

        /// <summary>
        ///  given all the database data 
        ///     set this.listHTML
        ///     and this.listPaginationHTML
        /// </summary>
        public string renderListHTML<T>(OrderedDictionary<string, string> fields, string listUrl, TableRow c, EList<ListAction> actions, int total, int limit, int offset, TablePersist<T> res) where T : TableRowPersist 
        {
            res.name = c.dbObjectName.table;  //make sure it has a name in case res.Count==0
            
            //we have to cast each item to TableRow
            TablePersist<TableRowPersist> resr = new TablePersist<TableRowPersist>();
            resr.name = res.name;
            resr.db = res.db;
            resr.validationExceptions = res.validationExceptions;
            foreach(T t in res) 
            {
                resr.Add((TableRowPersist)t);
            }
            IListRenderer renderer = this.listRenderer(resr);


            listHTML = (string)renderer.render(fields, actions);

            this.listPaginationHTML = "";
            if (limit >= 0 && total > limit)
            {
                //navigation links url params
                string navUrlParams = "";
                if (this.navLinksParam != null)
                {
                    navUrlParams = this.navLinksParam(this.searchText); //(this.searchText);
                    if (navUrlParams != null && navUrlParams.Trim() != "" && !navUrlParams.TrimStart().StartsWith("&"))
                    {
                        navUrlParams = "&" + navUrlParams.TrimStart();
                    }
                }

                if (listUrl == null && (actions != null || actions.Count > 0)) { listUrl = actions[0].url; }
                listPaginationHTML = (string)renderer.navigationLinks(new ListPagingData(listUrl, navUrlParams, total, limit, offset));
            }
            return listUrl;
        }

        /// <summary>
        /// run c.select() with all the necesary stuff
        /// </summary>
        public TablePersist<T> getListData<T>(TableRowDynamicSQL c, int limit, int offset) where T : TableRowDynamicSQL 
        {
            SQLStatement atr = new SQLStatement(c);
            DBParams p = new DBParams();
            if (limit >= 0)
            {
                atr.limit = limit;
                atr.offset = offset;
            }
            if (this.selectSqlCustomData != null) this.selectSqlCustomData(c, atr, p);
            TablePersist<T> res = c.select<T>(atr, p);
            return res;
        }

        /// <summary>
        /// find limit/offset/total parameters in page form or query string (total from DB if necesary)
        /// </summary>
        public void getPageNavigParams(TableRowDynamicSQL c, out int total, out int limit, out int offset)
        {
            total = 0;
            limit = getParam("limit") != "" ? int.Parse(getParam("limit")) : this.listLimit;
            offset = 0;
            if (limit >= 0)
            {
                if (getParam("total") != "")
                {
                    total = int.Parse(getParam("total"));
                }
                else
                {
                    SQLStatement atr = new SQLStatement(c);
                    DBParams p = new DBParams();
                    if (this.selectSqlCustomData != null) this.selectSqlCustomData(c, atr, p);
                    total = c.countAll(atr, p);
                }
                string off = getParam("offset");
                offset = off != "" ? int.Parse(off) : 0;
            }
        }

        public virtual EList<EDictionary<string, string>> parseSorterString(string sorterString)
        {
            Regex exp = new Regex("{([a-z|0-9|_]+){(asc|desc)}}+");
            string[] p = exp.Split(sorterString);  //"{fld_day{desc}}{fld_cust_id{asc}}");
            //Console.WriteLine("splited: " + CSV.toCsvLine(p));
            EList<EDictionary<string, string>> res = new EList<EDictionary<string, string>>();
            string stat = "field";
            string fname = "";
            for (int i = 0; i < p.Length; i++)
            {
                string f = p[i];
                if (f != null && f.Trim() != "")
                {
                    if (stat == "field")
                    {
                        fname = f;
                        stat = "sort";
                    }
                    else if (stat == "sort")
                    {
                        stat = "field";
                        res.Add(EDictionary<string, string>.fromStrStr("{'field': '" + fname + "', 'status': '" + f + "'}"));
                        fname = "";
                    }
                }
            }
            
            //res.ForEach(delegate(EDictionary<string, string> d)
            //{
            //    Console.WriteLine("-- parsed sort by: " + d["field"] + " " + d["status"]);
            //});

            return res;
        }



        public IFormRenderer simpleFormRenderer(TableRow table)
        {
            HTMLFormTableRenderer r = new HTMLFormTableRenderer();
            r.table = table;
            return r;
        }

        public IListRenderer simpleListRenderer<T>(TablePersist<T> table) where T: TableRowPersist
        {
            HTMLListRenderer r = new HTMLListRenderer();
            r.name = table.name;
            foreach (T tr in table)
            {
                r.table.Add(new RenderingProvider(tr));
            }
            r.useAjax = this.useAjax;
            return r;
        }
        

    }
}
